{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst input = document.querySelector(\".chose-date\")\nconst dataDays = document.querySelector(\"[data-days]\");\nconst dataHours = document.querySelector(\"[data-hours]\");\nconst dataMinutes = document.querySelector(\"[data-minutes]\");\nconst dataSeconds = document.querySelector(\"[data-seconds]\");\nconst btn = document.querySelector(\".start\");\nbtn.disabled = true;\n\nclass Timer {\n    constructor(selector) {\n        this.isActive = false;\n        this.userSelectedDate = null;\n        this.selectedTime = null;\n        const options = {\n            enableTime: true,\n            time_24hr: true,\n            altInput: true,\n            altFormat: 'd M Y H:i',\n            dateFormat: 'Y-m-d H:i',\n            defaultDate: new Date(),\n            minuteIncrement: 1,\n            onClose: (selectedDates) => {\n                console.log(selectedDates[0]);\n                this.userSelectedDate = selectedDates[0];\n                const currentTime = Date.now();\n                const selectedTime = this.userSelectedDate?.getTime();\n\n                if (selectedTime && selectedTime > currentTime) {\n                    btn.disabled = false;\n                } else {\n                    btn.disabled = true;\n                     iziToast.error({\n                position:  'topCenter',\n                message: 'Please choose a date in the future'\n            });\n                }\n            },\n        };\n        this.picker = flatpickr(input, options);\n    };\n\n    start() {\n        if (this.isActive) {\n            return;\n        };\n\n        this.isActive = true;\n        btn.disabled = true;\n        this.picker.altInput.disabled = true;\n\n        const currentTime = Date.now();\n        const selectedTime = this.userSelectedDate?.getTime();\n\n        if (!selectedTime || selectedTime < currentTime) {\n            this.isActive = false;\n            iziToast.warning({\n                position: 'topCenter',\n                message: 'Please choose a date in the future'\n            });\n        } else {\n            this.timerId = setInterval(() => {\n            const startTime = Date.now();\n            const deltaTime = selectedTime - startTime;\n                if (deltaTime <= 0) {\n                    clearInterval(this.timerId);\n                    updateClockFace(this.convertMs(0));\n                    this.isActive = false;\n                    btn.disabled = false;\n                    this.picker.altInput.disabled = false;\n                    return;\n                };\n                const time = this.convertMs(deltaTime);\n                updateClockFace(time);\n                console.log(time);\n            }, 1000);\n        }\n    }\n\n    convertMs(ms) {\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n\n        const days = this.pad(Math.floor(ms / day));\n        const hours = this.pad(Math.floor((ms % day) / hour));\n        const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n        const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n        return { days, hours, minutes, seconds };\n    };\n\n    pad(value) {\n        return String(value).padStart(2, \"0\");\n    }\n};\n\nconst time = new Timer();\nbtn.addEventListener(\"click\", time.start.bind(time));\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n    dataDays.textContent = `${days}`;\n    dataHours.textContent = `${hours}`;\n    dataMinutes.textContent = `${minutes}`;\n    dataSeconds.textContent = `${seconds}`;\n};"],"names":["input","dataDays","dataHours","dataMinutes","dataSeconds","btn","Timer","selector","options","selectedDates","currentTime","selectedTime","iziToast","flatpickr","startTime","deltaTime","updateClockFace","time","ms","days","hours","minutes","seconds","value"],"mappings":"2FAKA,MAAMA,EAAQ,SAAS,cAAc,aAAa,EAC5CC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAM,SAAS,cAAc,QAAQ,EAC3CA,EAAI,SAAW,GAEf,MAAMC,CAAM,CACR,YAAYC,EAAU,CAClB,KAAK,SAAW,GAChB,KAAK,iBAAmB,KACxB,KAAK,aAAe,KACpB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,SAAU,GACV,UAAW,YACX,WAAY,YACZ,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAUC,GAAkB,CACxB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5B,KAAK,iBAAmBA,EAAc,CAAC,EACvC,MAAMC,EAAc,KAAK,IAAG,EACtBC,EAAe,KAAK,kBAAkB,QAAO,EAE/CA,GAAgBA,EAAeD,EAC/BL,EAAI,SAAW,IAEfA,EAAI,SAAW,GACdO,EAAS,MAAM,CACpB,SAAW,YACX,QAAS,oCACzB,CAAa,EAED,CACZ,EACQ,KAAK,OAASC,EAAUb,EAAOQ,CAAO,CAC1C,CAEA,OAAQ,CACJ,GAAI,KAAK,SACL,OAGJ,KAAK,SAAW,GAChBH,EAAI,SAAW,GACf,KAAK,OAAO,SAAS,SAAW,GAEhC,MAAMK,EAAc,KAAK,IAAG,EACtBC,EAAe,KAAK,kBAAkB,QAAO,EAE/C,CAACA,GAAgBA,EAAeD,GAChC,KAAK,SAAW,GAChBE,EAAS,QAAQ,CACb,SAAU,YACV,QAAS,oCACzB,CAAa,GAED,KAAK,QAAU,YAAY,IAAM,CACjC,MAAME,EAAY,KAAK,IAAG,EACpBC,EAAYJ,EAAeG,EAC7B,GAAIC,GAAa,EAAG,CAChB,cAAc,KAAK,OAAO,EAC1BC,EAAgB,KAAK,UAAU,CAAC,CAAC,EACjC,KAAK,SAAW,GAChBX,EAAI,SAAW,GACf,KAAK,OAAO,SAAS,SAAW,GAChC,MACJ,CACA,MAAMY,EAAO,KAAK,UAAUF,CAAS,EACrCC,EAAgBC,CAAI,EACpB,QAAQ,IAAIA,CAAI,CACpB,EAAG,GAAI,CAEf,CAEA,UAAUC,EAAI,CAMV,MAAMC,EAAO,KAAK,IAAI,KAAK,MAAMD,EAAK,KAAG,CAAC,EACpCE,EAAQ,KAAK,IAAI,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EAC9CG,EAAU,KAAK,IAAI,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,CAAC,EAC3DI,EAAU,KAAK,IAAI,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAE5E,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,IAAIC,EAAO,CACP,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CACJ,CAEA,MAAMN,EAAO,IAAIX,EACjBD,EAAI,iBAAiB,QAASY,EAAK,MAAM,KAAKA,CAAI,CAAC,EAEnD,SAASD,EAAgB,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACxDrB,EAAS,YAAc,GAAGkB,CAAI,GAC9BjB,EAAU,YAAc,GAAGkB,CAAK,GAChCjB,EAAY,YAAc,GAAGkB,CAAO,GACpCjB,EAAY,YAAc,GAAGkB,CAAO,EACxC"}